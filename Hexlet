Операторы (+, -, *, //) и операнды (значения, например 8 и5)
коммутативный закон - от перемены мест слагаемых сумма не изменяется
линтер - программа для проверки написания кода (пробелы, отступы)

\ (обратный слэш) - экранирование
print("Dragon's mother said \"No\"")
# => Dragon's mother said "No"

\n - экранированная последовательность; начать с новой строки, like ENTER
print("- Are you hungry?\n- Aaaarrrgh!")
# => - Are you hungry?
# => - Aaaarrrgh!

kebab-case — составные части переменной разделяются дефисом. Например: my-super-var.
snake_case — для разделения используется подчеркивание. Например: my_super_var.
CamelCase — каждое слово в переменной пишется с заглавной буквы. Например: MySuperVar.

Интерполяция - вместо конкатенации
print(f'{greeting}, {first_name}!')

Multi-line строки - строки с тройными кавычками, чтобы не использовать \n
text = '''Пример текста,
состоящего из
нескольких строк'''

Срезы строк
value = '12-08-2034'
year = value[6:10] #взяли индексы с 6 по 9 включительно
print(year)  # => 2034

value = 'Hexlet'
value[3:]  # 'let'
value[:3]  # 'Hex'

[6:] - до конца строки, [:3] - с начала до 2 включительно
шаг извлечения:
value = 'Hexlet'
value[1:5:2]  # el
# 1:5 это 'exle'
# шаг 2 это каждый второй, то есть 'e' и 'l' => то есть мы как бы убираем каждый второй символ из получившегося и оставляем оставшиеся

abs() - делает число неотрицательным
