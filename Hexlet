Операторы (+, -, *, //) и операнды (значения, например 8 и5)
коммутативный закон - от перемены мест слагаемых сумма не изменяется
линтер - программа для проверки написания кода (пробелы, отступы)

\ (обратный слэш) - экранирование
print("Dragon's mother said \"No\"")
# => Dragon's mother said "No"

\n - экранированная последовательность; начать с новой строки, like ENTER
print("- Are you hungry?\n- Aaaarrrgh!")
# => - Are you hungry?
# => - Aaaarrrgh!

kebab-case — составные части переменной разделяются дефисом. Например: my-super-var.
snake_case — для разделения используется подчеркивание. Например: my_super_var.
CamelCase — каждое слово в переменной пишется с заглавной буквы. Например: MySuperVar.

Интерполяция - вместо конкатенации
print(f'{greeting}, {first_name}!')

Multi-line строки - строки с тройными кавычками, чтобы не использовать \n
text = '''Пример текста,
состоящего из
нескольких строк'''

Срезы строк
value = '12-08-2034'
year = value[6:10] #взяли индексы с 6 по 9 включительно
print(year)  # => 2034

value = 'Hexlet'
value[3:]  # 'let'
value[:3]  # 'Hex'

[6:] - до конца строки, [:3] - с начала до 2 включительно
шаг извлечения:
value = 'Hexlet'
value[1:5:2]  # el
# 1:5 это 'exle'
# шаг 2 это каждый второй, то есть 'e' и 'l' => то есть мы как бы убираем каждый второй символ из получившегося и оставляем оставшиеся

abs() - делает число неотрицательным
сигнатура функции - её входные/выходные параметры и их тип, в общем что да как делает функция
round(10.25, 0) - округление чисел
max(1, 5, 10) - возвращает макс. значение, т.е. 10
детерминированная функция - для одних и тех же входных параметров она возвращает один и тот же результат
(ex. len()) и недетерминированная (ex. random())
Имена функций должны содержать глаголы, так как выполняют действие: «построить что-то», «нарисовать что-то», «открыть что-то» 
После return никакой код не выполняется

def get_hidden_card(card_number, symbol_number = 4):
    card_number = card_number[12:17]
    stars_number = '*' * symbol_number
    return f'{stars_number}{card_number}'

функция-предикат (функция-вопрос) Предикат отвечает на вопрос «да» или «нет», возвращая значение типа bool (True/False)
ex. is_empty(), has_numbers()

Преобразуются в False значения: 0, 0.0, None, ''

Тернарный оператор - конструкция, которая по своему действию аналогична конструкции if-else, но при этом является выражением (требует 3 операнда)
def abs(number):
    return number if number >= 0 else -number

Синтаксический сахар: a = a + 1 → a += 1
                      a = a - 1 → a -= 1
                      
Нейтральный элемент операции - операция с этим элементом не изменяет то значение, над которым проводится операция
сложение и вычитание - 0, у конкатенации - ''

Ошибки бывают: синтаксические, ошибки программирования и логические
